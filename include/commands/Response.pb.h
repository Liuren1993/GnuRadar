// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Response.proto

#ifndef PROTOBUF_Response_2eproto__INCLUDED
#define PROTOBUF_Response_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace gnuradar {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Response_2eproto();
void protobuf_AssignDesc_Response_2eproto();
void protobuf_ShutdownFile_Response_2eproto();

class ResponseMessage;

enum ResponseMessage_Result {
  ResponseMessage_Result_OK = 0,
  ResponseMessage_Result_ERROR = 1
};
bool ResponseMessage_Result_IsValid(int value);
const ResponseMessage_Result ResponseMessage_Result_Result_MIN = ResponseMessage_Result_OK;
const ResponseMessage_Result ResponseMessage_Result_Result_MAX = ResponseMessage_Result_ERROR;
const int ResponseMessage_Result_Result_ARRAYSIZE = ResponseMessage_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResponseMessage_Result_descriptor();
inline const ::std::string& ResponseMessage_Result_Name(ResponseMessage_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResponseMessage_Result_descriptor(), value);
}
inline bool ResponseMessage_Result_Parse(
    const ::std::string& name, ResponseMessage_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResponseMessage_Result>(
    ResponseMessage_Result_descriptor(), name, value);
}
// ===================================================================

class ResponseMessage : public ::google::protobuf::Message {
 public:
  ResponseMessage();
  virtual ~ResponseMessage();

  ResponseMessage(const ResponseMessage& from);

  inline ResponseMessage& operator=(const ResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseMessage& default_instance();

  void Swap(ResponseMessage* other);

  // implements Message ----------------------------------------------

  ResponseMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseMessage& from);
  void MergeFrom(const ResponseMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ResponseMessage_Result Result;
  static const Result OK = ResponseMessage_Result_OK;
  static const Result ERROR = ResponseMessage_Result_ERROR;
  static inline bool Result_IsValid(int value) {
    return ResponseMessage_Result_IsValid(value);
  }
  static const Result Result_MIN =
    ResponseMessage_Result_Result_MIN;
  static const Result Result_MAX =
    ResponseMessage_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    ResponseMessage_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return ResponseMessage_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return ResponseMessage_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return ResponseMessage_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .gnuradar.ResponseMessage.Result value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::gnuradar::ResponseMessage_Result value() const;
  inline void set_value(::gnuradar::ResponseMessage_Result value);

  // optional string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:gnuradar.ResponseMessage)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* message_;
  int value_;
  friend void  protobuf_AddDesc_Response_2eproto();
  friend void protobuf_AssignDesc_Response_2eproto();
  friend void protobuf_ShutdownFile_Response_2eproto();

  void InitAsDefaultInstance();
  static ResponseMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// ResponseMessage

// required .gnuradar.ResponseMessage.Result value = 1;
inline bool ResponseMessage::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseMessage::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseMessage::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseMessage::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::gnuradar::ResponseMessage_Result ResponseMessage::value() const {
  // @@protoc_insertion_point(field_get:gnuradar.ResponseMessage.value)
  return static_cast< ::gnuradar::ResponseMessage_Result >(value_);
}
inline void ResponseMessage::set_value(::gnuradar::ResponseMessage_Result value) {
  assert(::gnuradar::ResponseMessage_Result_IsValid(value));
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:gnuradar.ResponseMessage.value)
}

// optional string message = 2;
inline bool ResponseMessage::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResponseMessage::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResponseMessage::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResponseMessage::clear_message() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& ResponseMessage::message() const {
  // @@protoc_insertion_point(field_get:gnuradar.ResponseMessage.message)
  return *message_;
}
inline void ResponseMessage::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set:gnuradar.ResponseMessage.message)
}
inline void ResponseMessage::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set_char:gnuradar.ResponseMessage.message)
}
inline void ResponseMessage::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gnuradar.ResponseMessage.message)
}
inline ::std::string* ResponseMessage::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gnuradar.ResponseMessage.message)
  return message_;
}
inline ::std::string* ResponseMessage::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ResponseMessage::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gnuradar.ResponseMessage.message)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gnuradar

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::gnuradar::ResponseMessage_Result> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gnuradar::ResponseMessage_Result>() {
  return ::gnuradar::ResponseMessage_Result_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Response_2eproto__INCLUDED
