import os
import sys
import shutil
import glob


################################################################################
################################################################################
def options(opt):
   opt.load('compiler_cxx')
   opt.load('compiler_c')


################################################################################
################################################################################
def configure(conf):
   conf.load('compiler_cxx')
   conf.load('compiler_c')


################################################################################
################################################################################
def remove_files(d):
   try:
      shutil.rmtree(d)
   except Exception as ex:
      print(ex)


################################################################################
################################################################################
def install_symlinks(hdr):

   sym_path =  os.path.abspath('include')
   
   print(sym_path)

   if not os.geteuid()==0:
      sys.exit('\nERROR: Root Acces is required to execute this script.\n')

   dst_dir = '/usr/local/include/usrp'
   print(dst_dir)

   remove_files(dst_dir)

   try:
      print('Creating Directory Tree...')
      os.symlink(sym_path,dst_dir)
      print('Header installation complete.')
   except Exception as ex:
      print(ex)



################################################################################
################################################################################
def install_headers(hdr):

   if not os.geteuid()==0:
      sys.exit('\nERROR: Root Acces is required to execute this script.\n')

   src_dir = 'include'
   dst_dir = '/usr/local/include/usrp'

   remove_files(dst_dir)

   try:
      print('Creating Directory Tree...')
      shutil.copytree(src_dir,dst_dir,symlinks=True)
      print('Header installation complete.')
   except Exception as ex:
      print(ex)


################################################################################
################################################################################
def build(bld):

   firmware_loc   = '${PREFIX}/gnuradar/firmware/rev4'
   fx2_firmware   = 'firmware/bin/std.ihx'
   fpga_image     = 'fpga/image/usrp1_iono_rx_300.rbf'
   udev_rules_loc = '/etc/udev/rules.d'
   udev_rules     = 'utils/10-usrp.rules'

   bld(
      features = 'cxx cxxstlib',
      includes = ['include','src'],
      source   = bld.path.ant_glob('src/*.c*'),
      cflags   = ['-O2','-fPIC'],
      cxxflags = ['-O2','-fPIC'],
      target   = 'gnuradar',
      vnum     = '1.0.0',
      #install_path = '${PREFIX}/lib'
   )
   
   bld.add_group()

   bld(
      features = 'cxx cxxprogram',
      includes = ['include','utils'],
      source   = 'utils/usrper.cc',
      libpath  = 'usrp',
      lib      = ['gnuradar','usb-1.0'],
      cxxflags = ['-O2'],
      target   = 'usrper',
   )

   ## install udev rules in proper location.
   ## NOTE: User must become a member of the "usrp"
   ##       group to use the device.
   bld.install_files(
         udev_rules_loc,
         udev_rules
         )

   # install firmware and fpga image in proper 
   # location.
   bld.install_files(
         firmware_loc,
         [ fx2_firmware, fpga_image ]
         )
